import { useState } from 'react';
import { Alert } from 'react-native';
import url from '../config/config';
import axios from 'axios';
import { auth } from '../config/firebase';
import { sendEmailVerification, updateEmail, verifyBeforeUpdateEmail } from 'firebase/auth';
import hookDataUser from './hookDataUser';

const hookUpdateEmail = () => {
    const { userEmail } = hookDataUser();
    const [newEmail, setNewEmail] = useState('');

    const alertMessages = {
        confirmEmail: {
            title: 'Campo obligatorio',
            message: 'Por favor, ingrese los datos.'
        },
        emailSent: {
            title: 'Exitoso',
            message: 'Correo actualizado. Por favor, verifica tu correo.'
        },
        error: {
            title: 'Error',
            message: 'Ocurrió un error al actualizar correo. Inténtalo de nuevo. Verifica que el correo sea correcto.'
        },
        verifyEmail: {
            title: 'Verificación requerida',
            message: 'Por favor, verifica tu correo electrónico antes de cambiarlo. Se ha enviado un correo de verificación.'
        }
    };

    const updateEmailUser = async (newEmail: string) => {
        if (!newEmail) {
            Alert.alert(alertMessages.confirmEmail.title, alertMessages.confirmEmail.message);
            return;
        }
        try {
            if (auth.currentUser) {
                if (auth.currentUser.emailVerified) {
                    await verifyBeforeUpdateEmail(auth.currentUser, newEmail);
                    await updateEmail(auth.currentUser, newEmail);
                    const response = await axios.post(`${url}/updateUser?userEmail=${userEmail}`, {
                        userEmail,
                        newEmail
                    });
                    if (response.status === 200) {
                        Alert.alert(alertMessages.emailSent.title, alertMessages.emailSent.message);
                    } else {
                        Alert.alert(alertMessages.error.title, alertMessages.error.message);
                    }
                } else {
                    await sendEmailVerification(auth.currentUser);
                    Alert.alert(alertMessages.verifyEmail.title, alertMessages.verifyEmail.message);
                }
            }
            else {
                Alert.alert(alertMessages.error.title, alertMessages.error.message);
            }
        }
        catch (error) {
            Alert.alert(alertMessages.error.title, alertMessages.error.message);
            console.log(error);
        }
    };
    return { newEmail, setNewEmail, updateEmailUser };
};

export default hookUpdateEmail;