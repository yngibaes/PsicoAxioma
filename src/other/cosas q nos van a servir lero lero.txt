https://reactnavigation.org/docs/preventing-going-back = Para cuando se este haciendo la entrada de diario

https://reactnavigation.org/docs/shared-element-transitions =  Para las animaciónes de navigación

https://reactnative.dev/docs/text-style-props = Documentación de React para poder ver cada cosa

npx react-native doctor - Para mirar los errores
npx prettier --write "**/*.{ts,tsx,js,jsx}" - organizar codigo lerolero

            https://www.google.com/search?q=texttype+textinput+react+native+android&sca_esv=01e0ff83ef1459c0&sxsrf=ADLYWILhaTQWSvtmGDHwsp1QDV-Uhteang%3A1720586533092&ei=JRGOZuGtBZuZwbkPs7yMoAU&oq=texttype+textinput+reac&gs_lp=Egxnd3Mtd2l6LXNlcnAiF3RleHR0eXBlIHRleHRpbnB1dCByZWFjKgIIAjIHECEYoAEYCjIHECEYoAEYCjIHECEYoAEYCkjmHVD_AVjnFHAEeACQAQCYAZMBoAGPB6oBAzAuN7gBA8gBAPgBAZgCCqACywbCAgoQABiwAxjWBBhHmAMAiAYBkAYIkgcDNC42oAfWJQ&sclient=gws-wiz-serp
            https://blog.logrocket.com/keyboardawarescrollview-keyboardavoidingview-react-native/
            https://reactnative.dev/docs/textinput
            https://www.taskade.com/spaces/3FkbZCu8UWVH9X6k/agents?onboarding-open-chat-agent-id=01J2D98NKGR9380VDXX4K3J958
            https://reactnative.dev/docs/textinput
            https://reactnavigation.org/docs/tab-based-navigation
            https://reactnative.dev/docs/images
            https://www.paste.photos/
            https://www.figma.com/design/cEsEbDLSfCKaxkD5xkXN3a/PsicoAxioma?node-id=9-2&m=dev


https://material-foundation.github.io/material-theme-builder/
https://m3.material.io/styles/shape/overview
https://m3.material.io/styles/icons/applying-icons
https://pixabay.com/illustrations/emoji-emotion-emoticon-expression-1585197/

Necesito terminar y arreglar el signup
    - Enviar datos del signup
    - organizar la vista
    - Mira si si nos sirve el boton normal o se necesita crear uno nuevo
Hacer el form de logIn
El de forget
Y empezar a traer datos de la base de datos


https://rnfirebase.io/auth/usage

- SignUp:
    - Que verifique primero si existe o el numero existe en la base de datos o que lo verifique firebase
    Nisto

- LogIn
    - Hacer consulta de logIn en la API - No es necesario para iniciar sesión - NISTO
    - Verificar que la función estebien de firebase y anexar la url de la consulta - NISTO - Verifica que el correo este verificado y que las credenciales sean correctas

- Forget
    - Realizar consulta en la API, función de firebase y verificar que funciones - Envía 

- Organizar vistas en un archivo aparte de la APP 
- Organizar diseños, primero preguntar si se puede
- Anexar una vista de espera
- Anexar tutorial

Ya casi se termina todo de registro

Button componente
// Objetivo: Componente de botón para la aplicación móvil de React Native.
import * as React from 'react'
import {StyleSheet, Pressable, Text, View} from 'react-native'
import {
  widthPercentageToDP as wp,
  heightPercentageToDP as hp,
} from 'react-native-responsive-screen'

// Definición de las props usando TypeScript
interface PropsButton {
  onPress: () => void // Función que ejecuta el botón
  colorButton: string
  colorText: string
  text: string
  width: string
  height: string
  size: string
}

// Definición del componente Button
const Button = (props: PropsButton) => {
  return (
    <View style={styles.divButton}>
      <Pressable
        style={[
          styles.parentButton,
          {
            backgroundColor: props.colorButton,
            width: wp(props.width),
            height: hp(props.height),
          },
        ]}>
        <Text
          style={[
            styles.button,
            styles.title,
            {color: props.colorText, fontSize: wp(props.size)},
          ]}>
          {props.text}
        </Text>
      </Pressable>
    </View>
  )
}

// Definición de los estilos
const styles = StyleSheet.create({
  button: {
    // Estilos del botón
    fontSize: wp('8%'), // Tamaño de la fuente, 15% del ancho de la pantalla
    textAlign: 'center',
  },
  divButton: {
    // Estilos del contenedor de los botones
    alignItems: 'center',
    width: wp('94%'), // Ancho del contenedor
  },
  parentButton: {
    // Estilos del contenedor del botón de inicio de sesión
    alignItems: 'center',
    borderRadius: 10, // Radio de las esquinas del botón
    justifyContent: 'center',
    overflow: 'hidden', // Ocultar elementos que sobresalgan
  },
  title: {
    // Estilos del título
    fontFamily: 'InterBold',
    fontWeight: '300', // Grosor del texto
  },
})

export default Button


// cardDiary.tsx
import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { useNavigation, NavigationProp } from '@react-navigation/native';
import { RootStackParamList } from './types'; // ajusta la ruta según sea necesario
import { Icon } from 'react-native-elements';
import { formatDate } from '../utils'; // ajusta la ruta según sea necesario
import styles from './styles'; // ajusta la ruta según sea necesario

const CardDiary = ({ data, error, limit }) => {
  const navigation = useNavigation<NavigationProp<RootStackParamList>>();

  if (error) return <Text style={styles.error}>Error: {error}</Text>;

  // Se ordena la data por fecha de manera descendente
  const sortedData = data.sort(
    (a, b) => new Date(b.diaryDate).getTime() - new Date(a.diaryDate).getTime(),
  );

  // Se limita la cantidad de datos a mostrar
  const limitedData = limit ? sortedData.slice(0, limit) : sortedData;

  return (
    <View style={styles.container}>
      {limitedData.length > 0 ? (
        limitedData.map(item => (
          <TouchableOpacity
            key={item.diaryID}
            style={styles.parentAll}
            onPress={() => navigation.navigate('DiaryDetail', { diaryID: item.diaryID })}
          >
            <View style={styles.parentTitle}>
              <Icon name="ellipse" type="ionicon" color="#47708D" size={15} />
              <Text style={styles.title}>{item.diaryTitle}</Text>
            </View>
            <View style={styles.parentDate}>
              <Text style={styles.date}>{formatDate(item.diaryDate)}</Text>
            </View>
            <View style={styles.parentDescri}>
              <Text style={styles.description} numberOfLines={4}>
                {item.diaryContent}
              </Text>
            </View>
          </TouchableOpacity>
        ))
      ) : (
        <Text>No data available</Text>
      )}
    </View>
  );
};

export default CardDiary;